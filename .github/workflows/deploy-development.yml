name: Development branch build and scan

on:
  push:
    branches: [ development ]
  workflow_dispatch:    

jobs:
  build_projects:
    name: Release build and tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set script permissions
        run: chmod +x ./build-all.sh     
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'
      - name: Build projects
        run: ./build-all.sh 
      - name: Upload coverage reports
        uses: actions/upload-artifact@v2
        with:
          name: coverage-reports
          path: |
            **/coverage/*
            !**/node_modules/**
      
      - name: Prepare deployment package
        run: ./devops/package.sh

      - name: Save deployment package
        uses: actions/upload-artifact@v2
        with:
          name: deployment-package
          path: ./devops/package.tar.gz

  sonarcloud_scan:
    if: false
    name: Sonar Cloud quality gate
    runs-on: ubuntu-latest
    needs: [ build_projects ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0        # Shallow clones should be disabled for a better relevancy of analysis
      - name: Download coverage reports
        uses: actions/download-artifact@v2
        with:
          name: coverage-reports
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  deploy:
    name: Deploy to target server
    runs-on: ubuntu-latest
    needs: [ build_projects ]
    steps:
      - name: Download deployment package
        uses: actions/download-artifact@v2
        with:
          name: deployment-package
          path: ./

      - name: Transfer and deploy on server
        run: |
          echo "$PRIVATE_KEY" > deploy_key.pem
          chmod 600 deploy_key.pem

          # Transfer archive
          scp -o StrictHostKeyChecking=no -i deploy_key.pem package.tar.gz peterrogov@34.78.113.121:/home/peterrogov/projects/supply-trail
          
          # Unpack and run installation script remotely
          ssh -o StrictHostKeyChecking=no -i deploy_key.pem peterrogov@34.78.113.121 "
            cd /home/peterrogov/projects/supply-trail &&
            rm -rf * &&
            tar -xzvf package.tar.gz &&
            chmod +x deploy.sh &&
            ./deploy.sh
          "
          rm -f deploy_key.pem
        env:
          PRIVATE_KEY: ${{ secrets.GCP_SERVER_KEY }}